### YamlMime:Tutorial
title: Generate meeting side panel
metadata:
  title: Meeting Side Panel
  description: With this learning module, learn how to generate meetings side panel to add and publish agenda for Teams.
  audience: Developer
  level: Beginner
  ms.date: 12/06/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/enable-and-configure-your-app-for-teams-meetings.md
  nextTutorialTitle: Read more to enable and configure apps for meetings
  ms.custom: mvc
  ms.localizationpriority: high
items:
  - durationInMinutes: 1
    content: |
      The meeting side panel enhances your in-meeting experience and helps organizers and presenters to have different set of views and actions.

      Key features of meeting side panel

      * Provisions to add new agenda point.
      * Adds the agenda as text input to the **Side Panel** list.
      * Publishes the agenda list to the meeting chat.

      This step-by-step guide helps you to generate meeting side panel to add and publish agenda. You'll see the following output:

         :::image type="content" source="~/assets/images/meetings-side-panel/sidepanelondesktopmobile.png" alt-text="Your Token" border="true":::

  - title: Prerequisites
    durationInMinutes: 1
    content: |
      Ensure you install the following tools and set up your development environment:  

      * [Microsoft Teams](https://teams.microsoft.com/) with valid account
      * [Latest version of Teams SDK](/javascript/api/overview/msteams-client?view=msteams-client-js-latest&preserve-view=true)
      * [Latest version of.NET Core SDK](https://dotnet.microsoft.com/download) 
      * [Latest version of Visual Studio](https://visualstudio.microsoft.com/downloads/)
      * [Latest version of nodejs](https://nodejs.org/en/download/)
      * [SignalR](/aspnet/signalr/overview/getting-started/tutorial-getting-started-with-signalr-and-mvc) to update agenda in real-time
      * [Latest version of ngrok](https://ngrok.com/download) only for devbox testing or any equivalent tunneling solution

        > [!NOTE]
        > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

  - title: Set up local environment
    durationInMinutes: 1
    content: |

      1. Open [Microsoft Teams Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
      1. Select **Code**.
      1. From the dropdown menu, select **Open with GitHub Desktop**.

         :::image type="content" source="~/assets/images/meetings-side-panel/clonerepository1.png" alt-text="Clone repository" border="true":::

      1. Select **Clone**. 

        > [!NOTE]
        > If you encounter the error "Filename too long," apply the git command 'git config --system core.longpaths true' in your administrator terminal of choice.

  - title: Create and register your bot
    durationInMinutes: 5
    content: |
      The following steps help you to create and register your bot in Azure portal.

      * Create Azure Bot resource to register bot with Azure Bot Service.
      * Create client secret to enable SSO authentication of the bot.
      * Add Teams channel to deploy the bot.
      * Use ngrok to create a tunnel to your web server's endpoints.
      * Add messaging endpoint to the ngrok tunnel you created.

      **To create Azure Bot resource**

      1. Go to the [Azure portal](https://portal.azure.com/).
      1. Select **Create a resource**.
      1. In the search box, enter **Azure Bot**.
      1. Select **Enter**.
      1. Select **Azure Bot**.

           :::image type="content" source="./assets/images/azure-bot.png" alt-text="Azure bot.":::

      1. Select **Create**.
      1. Enter required bot handle name in **Bot handle**.
      1. Select your **Subscription** from the dropdown list.
      1. Select your **Resource group** from the dropdown list. 

          :::image type="content" source="~/assets/images/meetings-side-panel/review-plus-create.png" alt-text="Select resource Azure bot" border="true":::

         You can also create a new resource group (select **Create new** > enter resource name > select **OK**).

      1. If you've created a new resource group, select the required location from **New resource group location** dropdown list.

            :::image type="content" source="~/assets/images/meetings-side-panel/newresource.png" alt-text="New resource group location" border="true":::

      1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 

         You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

         > [!NOTE]
         > You can't create more than one bot with the same **Microsoft App ID**.

      1. Select **Type of App** as **Multi Tenant**.

      1. Select **Review + create**.

           :::image type="content" source="~/assets/images/meetings-side-panel/Review-create.png" alt-text="Create Microsoft App ID" border="true":::

      1. If the validation passes, select **Create**. 

          It takes a few moments for your bot service to be provisioned. 

      1. Select **Go to resource**. 

           :::image type="content" source="~/assets/images/meetings-side-panel/botdeployment.png" alt-text="Deploy App" border="true":::

          Your Azure bot is created.

           :::image type="content" source="~/assets/images/meetings-side-panel/bot-page.png" alt-text="Azure bot resource created" border="true":::

      **To create client secret**

        Perform the following steps if you've created a new **Microsoft App ID**:

      1. In the left panel, select **Configuration**. 

         > [!TIP]
         > Save the **Microsoft App ID** or **Client ID** for future reference.

      1. Next to **Microsoft App ID**, select **Manage**.

         :::image type="content" source="~/assets/images/manage-bot-label.png" alt-text="manage bot":::

      1. In the **Client secrets** section, select **New client secret**. 

           :::image type="content" source="~/assets/images/meetings-side-panel/newclientsecret.png" alt-text="New client secret" border="true":::

         The **Add a client secret** window appears.  

      1. Enter **Description**.

      1. Select **Add**.

           :::image type="content" source="~/assets/images/meetings-side-panel/clientsecret.png" alt-text="Add client secret to app" border="true":::

      1. In the **Value** column, select **Copy to clipboard**.

           :::image type="content" source="~/assets/images/meetings-side-panel/clientvalue.png" alt-text="Value of client secret" border="true":::
         
         > [!TIP]
         > Save the **Client secrets** value or app password for future reference.

      **To add the Teams channel**

      1. Select **Home**.

          :::image type="content" source="~/assets/images/meetings-side-panel/gotohome.png" alt-text="Home page" border="true":::

      1. Select your bot from **Recent resources**.

      1. Select **Channels** in the left pane. 

      1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

      1. Select the checkbox to accept the **Terms of Service**.

      1. Select **Agree**.

          :::image type="content" source="~/assets/images/meetings-side-panel/terms-of-service1.png" alt-text="Terms of service" border="true":::

      1. Select **Apply**.  

      **To create tunnel for local web server**

      Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

       ```bash
       ngrok http -host-header=localhost 3978
       ```

      > [!TIP]
      > If you encounter **ERR_NGROK_4018**, follow the steps provided in the Command Prompt to sign up and authenticate ngrok. Then run the `ngrok http -host-header=localhost 3978` command.

      **To add messaging endpoint**

      1. From ngrok, copy the HTTPS URL.

         :::image type="content" source="../msteams-platform/assets/images/ngrok-url.png" alt-text="ngrok HTTPS URL":::

          > [!NOTE]
          > The HTTPS URL in your ngrok is your fully qualified domain name.
          > The `WebAppDomain` is a fully qualified domain name that doesn't include `https://` in it.

      1. In **Settings** for the Azure bot that you created, select **Configuration**.

      1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

           :::image type="content" source="~/assets/images/meetings-side-panel/messaging-endpoint.png" alt-text="Messaging Endpoint" border="true":::

      1. Select **Apply**.

          You have successfully set up a bot in Azure Bot Service.

  - title: Update the Azure AD app registration
    durationInMinutes: 1
    content: |

      1. Go to the [Azure portal](https://portal.azure.com/).

      1. Select **Azure Active Directory**.

      1. In the left navigation panel, select **App Registrations**.

      1. Select your bot.

          :::image type="content" source="~/assets/images/meetings-side-panel/appregister.png" alt-text="App registration" border="true":::

      1. Under **Manage**, select **Expose an API**.

      1. Select **Set**.

          :::image type="content" source="~/assets/images/meetings-side-panel/exposeanapi.png" alt-text="Expose an API" border="true":::

      1. Set the **Application ID URI** in the form of `api://your ngrok/botid-{AppID}`.

          :::image type="content" source="~/assets/images/meetings-side-panel/setlink.png" alt-text="Set link" border="true":::
          
         The following image shows the domain name:
          
          :::image type="content" source="~/assets/images/meetings-side-panel/appIDuri.png" alt-text="App ID URI" border="true":::

          > [!NOTE]
          > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
          > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

      1. Select **Add a scope**. 

          :::image type="content" source="~/assets/images/meetings-side-panel/selectscope.png" alt-text="Select scope" border="true":::

      1. In the panel that appears, enter `access_as_user` as the **Scope name**.

      1. Set **Who can consent?** to `Admins and users`.

      1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>

           * Enter `Teams can access the user’s profile` as **Admin consent display name**.

           * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

           * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

           * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.

      1. Ensure that **State** is set to **Enabled**.

      1. Select **Add scope** to save.

          :::image type="content" source="~/assets/images/meetings-side-panel/addascope.png" alt-text="Add a scope" border="true":::

          > [!NOTE]
          > The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end.</br>
             `api://4d52****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`

          :::image type="content" source="~/assets/images/meetings-side-panel/scopes.png" alt-text="Scopes" border="true":::

      1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 

      1. Select **Add a client application**. 

          :::image type="content" source="~/assets/images/meetings-side-panel/selectclientapp.png" alt-text="Select client application" border="true":::

      1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application. 

           :::image type="content" source="~/assets/images/meetings-side-panel/addclientapplication1.png" alt-text="Add client application 1" border="true"::: 

         You can enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

           :::image type="content" source="~/assets/images/meetings-side-panel/addclientapplication2.png" alt-text="Add client application 2" border="true":::

      1. Select **Authorized scopes**.

           :::image type="content" source="~/assets/images/meetings-side-panel/authorizedscope.png" alt-text="Add client application 2" border="true":::

         The following image displays the client Id:

           :::image type="content" source="~/assets/images/meetings-side-panel/clientapps.png" alt-text="Client applications" border="true"::: 

      1. In the left panel, select **API Permissions**. 

         > [!NOTE]
         > Users need to consent to these permissions only if the Azure AD app is registered in a different tenant.

      1. Select **Add a permission**.

          :::image type="content" source="~/assets/images/meetings-side-panel/add-permission.png" alt-text="Add permission" border="true"::: 

      1. Select **Microsoft Graph**.

      1. Select **Delegated permissions**.

      1. Add the following permissions:</br>
           * **email**
           * **offline_access**
           * **OpenId**
           * **profile**
           * **User.Read**

      1. Select **Add permissions**.

          :::image type="content" source="~/assets/images/meetings-side-panel/other-permissions.png" alt-text="Other permissions" border="true":::
          :::image type="content" source="~/assets/images/meetings-side-panel/other-permissions2.png" alt-text="Other permissions" border="true":::

      1. From the left panel, select **Authentication** to set a redirect URI. 

         > [!NOTE]
         > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
                 
           1. Select **Add a platform**.
           1. Select **Web**.

               :::image type="content" source="~/assets/images/meetings-side-panel/webauth.png" alt-text="Web" border="true":::

           1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
             `https://your ngrok/auth-end`. </br>

           1. Enable **Implicit grant and hybrid flows** by selecting the following checkboxes:
               * **ID tokens**
               * **Access tokens**

           1. Select **Configure**.

               :::image type="content" source="~/assets/images/meetings-side-panel/authend.png" alt-text="Auth-end" border="true":::

  - title: Set up app settings and manifest files
    durationInMinutes: 1
    content: |
      1. Navigate to **appsettings.json** in cloned repository.

            :::image type="content" source="~/assets/images/meetings-side-panel/appsettingslocation.png" alt-text="App settings location" border="true":::

      1. Open **appsettings.json** in Visual Studio and update the following information:  

           * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
           * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
           * Set `"BaseUrl"` to the fully qualified ngrok domain name.

            :::image type="content" source="~/assets/images/meetings-side-panel/appsettings.png" alt-text="App settings" border="true":::
            

      1. Navigate to **manifest.json** in cloned repository.

           :::image type="content" source="~/assets/images/meetings-side-panel/manifestlocation.png" alt-text="Manifest file location" border="true":::

      1. Open **manifest.json** in Visual Studio and make the following changes:

           * Replace all occurrences of `<<Your_Domain_URL>>` with your fully qualified ngrok domain name.
           * Replace all occurrences of `<<Microsoft-App-ID>>` with your bot's **Microsoft App ID**.

           :::image type="content" source="~/assets/images/meetings-side-panel/manifest-2.png" alt-text="Manifest image2" border="true":::

  - title: Build and run the service
    durationInMinutes: 1
    content: |
      **To build and run the service using Visual Studio or Command line**

      # [Visual Studio](#tab/vs)

         1. Open **Visual Studio**.
         1. Navigate to **File** > **Open** > **Project/Solution**.

             :::image type="content" source="~/assets/images/meetings-side-panel/VSopenfile.png" alt-text="Open file" border="true":::

         1. Select **SidePanel.sln** file from **csharp** folder.

             :::image type="content" source="~/assets/images/meetings-side-panel/Tokenfileready.png" alt-text="Solution File" border="true":::

         1. Press **F5** to run the project.

         1. Select **Yes** if the following dialog appears:

              :::image type="content" source="~/assets/images/meetings-side-panel/certificate.png" alt-text="Trust Certificate" border="true":::

            A webpage opens with a message **Your bot is ready!**.

             :::image type="content" source="~/assets/images/meetings-side-panel/appisready.png" alt-text="App ready" border="true"::: 

          
      # [Command line](#tab/cli)

      Navigate to **samples > meetings-sidepanel > csharp > Side Panel** in a Command Prompt window and enter the following command:

      ```bash
      dotnet run
      ```
      :::image type="content" source="~/assets/images/meetings-side-panel/dotnetruncmd.png" alt-text="Dotnet" border="true":::

  - title: Add Meetings Side Panel to Teams
    durationInMinutes: 1
    content: |

      1. In your cloned repository, navigate to **csharp > Side Panel > Manifest**.

      1. Create a .zip with the following files that are present in the **Manifest** folder: 
         * manifest.json
         * icon-outline.png
         * icon-color.png

           :::image type="content" source="~/assets/images/meetings-side-panel/zipfile.png" alt-text="Zip file" border="true"::: 

      1. Create a meeting with a few presenters and attendees.

      1. After the meeting is created, go to the meeting details page and select **Add an app**.

           :::image type="content" source="~/assets/images/meetings-side-panel/addanapp.png" alt-text="Add an app" border="true":::

      1. In the pop-up window, select **Manage apps**.

          :::image type="content" source="~/assets/images/meetings-side-panel/manageapps.png" alt-text="Manage apps" border="true"::: 

      1. Select **Upload a custom app**. 

          :::image type="content" source="~/assets/images/meetings-side-panel/uploadcustomapp.png" alt-text="Upload custom app" border="true"::: 

      1. Select **Open** to upload the .zip file that you created in the **Manifest** folder.

          :::image type="content" source="~/assets/images/meetings-side-panel/selectzip.png" alt-text="Select zip file" border="true"::: 

      1. Select **Add**.

          :::image type="content" source="~/assets/images/meetings-side-panel/addtheapp.png" alt-text="Add the app" border="true"::: 

         The **Manage apps** section displays the list of applications.

          :::image type="content" source="~/assets/images/meetings-side-panel/manageappsection.png" alt-text="App in Manage apps" border="true"::: 

      1. Go to Teams meeting.

      1. Select **Add an app**. 

         In the app selection page, the app is displayed as **Side Panel**.

          :::image type="content" source="~/assets/images/meetings-side-panel/appicon-1.png" alt-text="App icon in Teams" border="true"::: 

      1. Select the **Side Panel** app.

      1. Select **Save**.

          :::image type="content" source="~/assets/images/meetings-side-panel/welcomeapp.png" alt-text="Welcome App" border="true"::: 

         The app is visible in the meeting Side Panel.

  - title: Interact with the app in Teams
    durationInMinutes: 1
    content: |
      Let's interact with the app in Teams!

      1. Select **Add New Agenda Item** to add a new agenda to the default agenda list.

          :::image type="content" source="~/assets/images/meetings-side-panel/sidepanelinmeet.png" alt-text="Token in Meet" border="true"::: 

      1. Enter a new agenda item to the list and select **Add**.

           :::image type="content" source="~/assets/images/meetings-side-panel/newagenda.png" alt-text="Token in Meet" border="true"::: 

         The new agenda is added in the list.

      1. Select **Publish Agenda**.

           :::image type="content" source="~/assets/images/meetings-side-panel/youragenda.png" alt-text="Your Token" border="true"::: 

         The new agenda list is displayed in the meeting chat.

           :::image type="content" source="~/assets/images/meetings-side-panel/agendainchat.png" alt-text="Your Token" border="true":::

  - title: Complete challenge
    durationInMinutes: 1
    content: |
      Did you come up with something like this?

         :::image type="content" source="~/assets/images/meetings-side-panel/sidepanelondesktopmobile.png" alt-text="Token in Meet" border="true":::

  - content: |
      You've completed the tutorial to get started with a **Side Panel** app!
